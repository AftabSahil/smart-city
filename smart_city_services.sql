CREATE DATABASE Smart_city_Services;
USE Smart_city_Services;

CREATE TABLE Citizens (
    CitizenID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Address TEXT,
    ContactInfo VARCHAR(20) UNIQUE,
    RegistrationDate DATE
);

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Head VARCHAR(100),
    Budget DECIMAL(12,2)
);

CREATE TABLE Services (
    ServiceID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    DepartmentID INT,
    Cost DECIMAL,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

CREATE TABLE Requests (
    RequestID INT PRIMARY KEY AUTO_INCREMENT,
    CitizenID INT,
    ServiceID INT,
    DateRequested DATE,
    Status VARCHAR(50),
    FOREIGN KEY (CitizenID) REFERENCES Citizens(CitizenID),
    FOREIGN KEY (ServiceID) REFERENCES Services(ServiceID)
);

CREATE TABLE Complaints (
    ComplaintID INT PRIMARY KEY AUTO_INCREMENT,
    CitizenID INT,
    ServiceID INT,
    Date DATE,
    Description TEXT,
    Status VARCHAR(50),
    FOREIGN KEY (CitizenID) REFERENCES Citizens(CitizenID),
    FOREIGN KEY (ServiceID) REFERENCES Services(ServiceID)
);

CREATE TABLE Billing (
    BillID INT PRIMARY KEY AUTO_INCREMENT,
    CitizenID INT,
    ServiceID INT,
    Amount DECIMAL,
    DueDate DATE,
    Status VARCHAR(50),
    FOREIGN KEY (CitizenID) REFERENCES Citizens(CitizenID),
    FOREIGN KEY (ServiceID) REFERENCES Services(ServiceID)
);

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    BillID INT,
    PaymentDate DATE,
    Amount DECIMAL,
    Method VARCHAR(50),
    FOREIGN KEY (BillID) REFERENCES Billing(BillID)
);

INSERT INTO Citizens (Name, Address, ContactInfo, RegistrationDate) VALUES
('Rahul Mehta', '12 MG Road, Bangalore', '9876543210', '2023-06-10'),
('Ayesha Khan', '45 Residency Road, Bangalore', '8765432190', '2023-07-15'),
('John Dâ€™Souza', '33 Indiranagar, Bangalore', '7896541230', '2023-05-01');

INSERT INTO Departments (Name, Head, Budget) VALUES
('Electricity', 'Anita Verma', 800000),
('Water Supply', 'Ravi Menon', 500000),
('Sanitation', 'Preeti Singh', 300000);

INSERT INTO Services (Name, Description, DepartmentID, Cost) VALUES
('New Electricity Connection', 'Install a new electric meter', 1, 1200),
('Water Leakage Repair', 'Fix leaking water pipeline', 2, 300),
('Garbage Pickup Request', 'Request for garbage collection', 3, 100),
('Street Light Repair', 'Repair broken street lights', 1, 450);


INSERT INTO Requests (CitizenID, ServiceID, DateRequested, Status) VALUES
(1, 1, '2024-06-20', 'Pending'),
(2, 3, '2024-06-21', 'Completed'),
(3, 2, '2024-06-22', 'In Progress'),
(1, 4, '2024-06-25', 'Pending'),
(2, 2, '2024-06-26', 'Completed');


INSERT INTO Complaints (CitizenID, ServiceID, Date, Description, Status) VALUES
(1, 1, '2024-06-27', 'Meter not working', 'Open'),
(2, 3, '2024-06-28', 'Garbage not picked', 'Resolved'),
(3, 2, '2024-06-29', 'Slow repair process', 'Open');

INSERT INTO Billing (CitizenID, ServiceID, Amount, DueDate, Status) VALUES
(1, 1, 1200, '2024-07-05', 'Unpaid'),
(2, 3, 100, '2024-07-06', 'Paid'),
(3, 2, 300, '2024-07-07', 'Overdue'),
(1, 4, 450, '2024-07-08', 'Unpaid');

INSERT INTO Payments (BillID, PaymentDate, Amount, Method) VALUES
(2, '2024-07-06', 100, 'UPI'),
(3, '2024-07-07', 300, 'Cash');

-- some queries
-- 1. Top 5 Most Requested Services

SELECT s.Name AS Service, COUNT(*) AS TotalRequests
FROM Requests r
JOIN Services s ON r.ServiceID = s.ServiceID
GROUP BY s.Name
ORDER BY TotalRequests DESC
LIMIT 5;

-- 2. Total Revenue Generated by Each Department
SELECT d.Name AS Department, SUM(b.Amount) AS TotalRevenue
FROM Billing b
JOIN Services s ON b.ServiceID = s.ServiceID
JOIN Departments d ON s.DepartmentID = d.DepartmentID
GROUP BY d.Name;

-- 3. Citizens With Unpaid Bills Over 60 Days
SELECT c.Name, b.Amount, b.DueDate
FROM Billing b
JOIN Citizens c ON b.CitizenID = c.CitizenID
WHERE b.Status = 'Unpaid' AND DATEDIFF(CURDATE(), b.DueDate) > 60;

-- 4. Number of Complaints per Department
SELECT d.Name AS Department, COUNT(*) AS TotalComplaints
FROM Complaints comp
JOIN Services s ON comp.ServiceID = s.ServiceID
JOIN Departments d ON s.DepartmentID = d.DepartmentID
GROUP BY d.Name;

-- 5. Average Billing Amount per Service
SELECT s.Name AS Service, AVG(b.Amount) AS AverageBill
FROM Billing b
JOIN Services s ON b.ServiceID = s.ServiceID
GROUP BY s.Name;

-- 6. Services Requested by Each 
SELECT c.Name AS Citizen, s.Name AS Service, r.Status
FROM Requests r
JOIN Citizens c ON r.CitizenID = c.CitizenID
JOIN Services s ON r.ServiceID = s.ServiceID
ORDER BY c.Name;

-- 7. Complaints Raised in the Last 7 Days
SELECT c.Name AS Citizen, s.Name AS Service, comp.Description, comp.Date
FROM Complaints comp
JOIN Citizens c ON comp.CitizenID = c.CitizenID
JOIN Services s ON comp.ServiceID = s.ServiceID
WHERE comp.Date >= CURDATE() - INTERVAL 7 DAY;

-- 8. Total Requests by Status (Group By)
SELECT Status, COUNT(*) AS TotalRequests
FROM Requests
GROUP BY Status;

-- 9. Citizens Who Made More Than 1 Complaint
SELECT c.Name, COUNT(*) AS TotalComplaints
FROM Complaints comp
JOIN Citizens c ON comp.CitizenID = c.CitizenID
GROUP BY c.Name
HAVING COUNT(*) > 1;

-- 10. Revenue Collection Over Time (Monthly)
SELECT MONTH(PaymentDate) AS Month, SUM(Amount) AS TotalCollected
FROM Payments
GROUP BY MONTH(PaymentDate)
ORDER BY Month;


-- 1. Views
-- A VIEW is a virtual table â€“ good for dashboards and restricting access.

-- ðŸ“Œ View: Active Citizens with Pending Bills
CREATE VIEW ActiveCitizenBilling AS
SELECT c.Name, b.Amount, b.DueDate, b.Status
FROM Citizens c
JOIN Billing b ON c.CitizenID = b.CitizenID
WHERE b.Status = 'Unpaid';

-- ðŸ“Œ View: Services Pending Assignment
CREATE VIEW PendingServiceRequests AS
SELECT c.Name AS Citizen, s.Name AS Service, r.DateRequested
FROM Requests r
JOIN Citizens c ON r.CitizenID = c.CitizenID
JOIN Services s ON r.ServiceID = s.ServiceID
WHERE r.Status = 'Pending';

--  2. Stored Procedures
-- Procedures are reusable blocks of SQL logic.

-- ðŸ“Œ Procedure: Generate Monthly Billing Report
DELIMITER //
CREATE PROCEDURE GetMonthlyBillingReport(IN monthNum INT)
BEGIN
  SELECT * FROM Billing
  WHERE MONTH(DueDate) = monthNum;
END;
//
DELIMITER ;

-- ðŸ“Œ Procedure: Assign Complaint to Department
DELIMITER //
CREATE PROCEDURE AssignComplaint(IN complaintId INT, IN newStatus VARCHAR(50))
BEGIN
  UPDATE Complaints SET Status = newStatus
  WHERE ComplaintID = complaintId;
END;
//
DELIMITER ;

 -- 3. Triggers
-- Triggers run automatically on INSERT/UPDATE/DELETE.

-- ðŸ“Œ Trigger: Log billing changes
CREATE TABLE BillingLogs (
    LogID INT AUTO_INCREMENT PRIMARY KEY,
    BillID INT,
    OldStatus VARCHAR(50),
    NewStatus VARCHAR(50),
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
DELIMITER //

CREATE TRIGGER AfterBillingUpdate
AFTER UPDATE ON Billing
FOR EACH ROW
BEGIN
  IF OLD.Status != NEW.Status THEN
    INSERT INTO BillingLogs (BillID, OldStatus, NewStatus)
    VALUES (OLD.BillID, OLD.Status, NEW.Status);
  END IF;
END;
//
DELIMITER ;

-- 4. Transactions
-- A TRANSACTION ensures atomicity â€“ either all operations succeed, or none.

-- ðŸ“Œ Example: Bill is paid â†’ update bill + insert payment
START TRANSACTION;

UPDATE Billing
SET Status = 'Paid'
WHERE BillID = 1;

INSERT INTO Payments (BillID, PaymentDate, Amount, Method)
VALUES (1, CURDATE(), 1200, 'Card');

COMMIT;  -- or ROLLBACK;

-- 5. Roles & Permissions
-- Use this to simulate admin, citizen, department head, etc.

-- ðŸ“Œ Create Roles:
-- Admin (full access)
-- CREATE USER 'admin_user'@'localhost' IDENTIFIED BY 'admin123';
-- GRANT ALL PRIVILEGES ON Smart_city_Services.* TO 'admin_user'@'localhost';

-- Department Head (read-only)
-- GRANT SELECT ON Smart_city_Services.Billing TO 'dept_head'@'localhost';
-- GRANT SELECT ON Smart_city_Services.Complaints TO 'dept_head'@'localhost';

 -- Citizen (limited access)
-- CREATE USER 'citizen_user'@'localhost' IDENTIFIED BY 'citizen123';
-- GRANT SELECT, INSERT ON Smart_city_Services.Requests TO 'citizen_user'@'localhost';












 







